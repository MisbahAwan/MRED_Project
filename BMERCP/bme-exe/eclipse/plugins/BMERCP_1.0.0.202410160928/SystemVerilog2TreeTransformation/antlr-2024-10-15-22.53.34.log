2024-10-15 22:53:34:142 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SystemVerilog2Tree (@ header {
package SystemVerilog2TreeTransformation;
}) (RULES (RULE ELSE (BLOCK (ALT 'else'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE BEGIN (BLOCK (ALT 'begin'))) (RULE END (BLOCK (ALT 'end'))) (RULE ENDCASE (BLOCK (ALT 'endcase'))) (RULE IF (BLOCK (ALT 'if'))) (RULE DISPLAY (BLOCK (ALT '$display'))) (RULE ID (BLOCK (ALT [a-zA-Z_.] (* (BLOCK (ALT [a-zA-Z0-9_.])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE HEX_INT (BLOCK (ALT '0x' (+ (BLOCK (ALT [0-9a-fA-F])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE SINGLE_LINE_COMMENT (BLOCK (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))))) (RULE MULTI_LINE_COMMENT (BLOCK (ALT '/*' (* (BLOCK (ALT .))) '*/'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT '\\"') (ALT (~ (SET ["]))))) '"'))) (RULE CHAR (BLOCK (ALT '\'' . '\''))) (RULE SEMICOLON (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LBRACE (BLOCK (ALT '{'))) (RULE RBRACE (BLOCK (ALT '}'))) (RULE LBRACK (BLOCK (ALT '['))) (RULE RBRACK (BLOCK (ALT ']'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE STAR (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE LT (BLOCK (ALT '<'))) (RULE GT (BLOCK (ALT '>'))) (RULE LE (BLOCK (ALT '<='))) (RULE GE (BLOCK (ALT '>='))) (RULE EQEQ (BLOCK (ALT '=='))) (RULE NOTEQ (BLOCK (ALT '!='))) (RULE QUOTE (BLOCK (ALT '\''))) (RULE DOLLAR (BLOCK (ALT '$'))) (RULE file (BLOCK (ALT (BLOCK (ALT moduleDecl)) EOF))) (RULE moduleDecl (BLOCK (ALT 'module' ID SEMICOLON (* (BLOCK (ALT moduleItem))) 'endmodule'))) (RULE moduleItem (BLOCK (ALT declaration) (ALT functionDecl) (ALT statement) (ALT initialBlock))) (RULE initialBlock (BLOCK (ALT 'initial' BEGIN statement END))) (RULE functionDecl (BLOCK (ALT 'function' returnType ID LPAREN (? (BLOCK (ALT parameterList))) RPAREN SEMICOLON (* (BLOCK (ALT statement))) 'endfunction'))) (RULE returnType (BLOCK (ALT 'void') (ALT 'int') (ALT 'real') (ALT ID))) (RULE parameterList (BLOCK (ALT parameter (? (BLOCK (ALT qualifier))) (? (BLOCK (ALT STAR))) (? (BLOCK (ALT ID))) (* (BLOCK (ALT (? (BLOCK (ALT COMMA))) parameter)))))) (RULE parameter (BLOCK (ALT ID) (ALT 'void') (ALT dataType))) (RULE qualifier (BLOCK (ALT 'const'))) (RULE declaration (BLOCK (ALT dataType ID (? (BLOCK (ALT LBRACK INT COLON INT RBRACK))) (? (BLOCK (ALT EQUAL primary))) SEMICOLON))) (RULE dataType (BLOCK (ALT 'int') (ALT 'real') (ALT 'logic') (ALT 'byte') (ALT ID))) (RULE statement (BLOCK (ALT (BLOCK (ALT assignment) (ALT declaration) (ALT functionCall) (ALT ifStatement) (ALT loopStatement) (ALT switchStatement) (ALT displayStatement) (ALT comment)) (? (BLOCK (ALT SEMICOLON)))))) (RULE statementTwo (BLOCK (ALT (BLOCK (ALT assignment) (ALT declaration) (ALT functionCall) (ALT ifStatement) (ALT loopStatement) (ALT switchStatement) (ALT displayStatement) (ALT comment)) (? (BLOCK (ALT SEMICOLON)))))) (RULE assignment (BLOCK (ALT indexedID (BLOCK (ALT (BLOCK (ALT EQUAL expression))) (ALT PLUSPLUS) (ALT MINUSMINUS))))) (RULE indexedID (BLOCK (ALT ID (* (BLOCK (ALT LBRACK expression RBRACK)))))) (RULE PLUSPLUS (BLOCK (ALT (BLOCK (ALT '++'))))) (RULE MINUSMINUS (BLOCK (ALT (BLOCK (ALT '--'))))) (RULE functionCall (BLOCK (ALT ID LPAREN (? (BLOCK (ALT argumentList))) RPAREN))) (RULE argumentList (BLOCK (ALT argument (* (BLOCK (ALT COMMA argument)))))) (RULE argument (BLOCK (ALT expression) (ALT transformedArgument))) (RULE transformedArgument (BLOCK (ALT dataCastArgument) (ALT bitsArgument))) (RULE dataCastArgument (BLOCK (ALT dataType QUOTE ID))) (RULE bitsArgument (BLOCK (ALT DOLLAR 'bits' LPAREN ID RPAREN))) (RULE functionCallID (BLOCK (ALT ID))) (RULE ifStatement (BLOCK (ALT IF LPAREN expression RPAREN BEGIN (+ (BLOCK (ALT statement))) END (? (BLOCK (ALT ELSE BEGIN (+ (BLOCK (ALT statementTwo))) END)))))) (RULE loopStatement (BLOCK (ALT forLoop) (ALT whileLoop))) (RULE forLoop (BLOCK (ALT FOR LPAREN dataType assignment SEMICOLON expression SEMICOLON assignment RPAREN (? (BLOCK (ALT BEGIN))) (+ (BLOCK (ALT statement))) (? (BLOCK (ALT END)))))) (RULE whileLoop (BLOCK (ALT WHILE LPAREN expression RPAREN (? (BLOCK (ALT BEGIN))) (+ (BLOCK (ALT statement))) (? (BLOCK (ALT END)))))) (RULE switchStatement (BLOCK (ALT CASE LPAREN expression RPAREN (+ (BLOCK (ALT caseBlock))) (? (BLOCK (ALT defaultBlock))) ENDCASE))) (RULE caseBlock (BLOCK (ALT expression COLON (? (BLOCK (ALT BEGIN))) (* (BLOCK (ALT statement))) (? (BLOCK (ALT END))) (? (BLOCK (ALT SEMICOLON)))))) (RULE defaultBlock (BLOCK (ALT DEFAULT COLON (? (BLOCK (ALT (* (BLOCK (ALT statement)))))) (? (BLOCK (ALT SEMICOLON)))))) (RULE expression (BLOCK (ALT primary (? (BLOCK (ALT LPAREN (? (BLOCK (ALT argumentList))) RPAREN))) (* (BLOCK (ALT operator primary)))))) (RULE primary (BLOCK (ALT ID) (ALT HEX_INT) (ALT INT) (ALT STRING) (ALT CHAR) (ALT dataType) (ALT LPAREN expression RPAREN) (ALT castFunctionCall))) (RULE operator (BLOCK (ALT PLUS) (ALT MINUS) (ALT STAR) (ALT SLASH) (ALT PERCENT) (ALT LT) (ALT GT) (ALT LE) (ALT GE) (ALT EQEQ) (ALT NOTEQ))) (RULE castFunctionCall (BLOCK (ALT dataType QUOTE ID LPAREN RPAREN))) (RULE displayStatement (BLOCK (ALT DISPLAY LPAREN (? (BLOCK (ALT STRING))) (? (BLOCK (ALT argument))) (? (BLOCK (ALT COMMA argumentList))) RPAREN))) (RULE comment (BLOCK (ALT SINGLE_LINE_COMMENT) (ALT MULTI_LINE_COMMENT)))))
2024-10-15 22:53:34:168 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SystemVerilog2Tree (@ header {
package SystemVerilog2TreeTransformation;
}) (RULES (RULE ELSE (BLOCK (ALT 'else'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE BEGIN (BLOCK (ALT 'begin'))) (RULE END (BLOCK (ALT 'end'))) (RULE ENDCASE (BLOCK (ALT 'endcase'))) (RULE IF (BLOCK (ALT 'if'))) (RULE DISPLAY (BLOCK (ALT '$display'))) (RULE ID (BLOCK (ALT [a-zA-Z_.] (* (BLOCK (ALT [a-zA-Z0-9_.])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE HEX_INT (BLOCK (ALT '0x' (+ (BLOCK (ALT [0-9a-fA-F])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE SINGLE_LINE_COMMENT (BLOCK (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))))) (RULE MULTI_LINE_COMMENT (BLOCK (ALT '/*' (* (BLOCK (ALT .))) '*/'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT '\\"') (ALT (~ (SET ["]))))) '"'))) (RULE CHAR (BLOCK (ALT '\'' . '\''))) (RULE SEMICOLON (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LBRACE (BLOCK (ALT '{'))) (RULE RBRACE (BLOCK (ALT '}'))) (RULE LBRACK (BLOCK (ALT '['))) (RULE RBRACK (BLOCK (ALT ']'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE STAR (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE LT (BLOCK (ALT '<'))) (RULE GT (BLOCK (ALT '>'))) (RULE LE (BLOCK (ALT '<='))) (RULE GE (BLOCK (ALT '>='))) (RULE EQEQ (BLOCK (ALT '=='))) (RULE NOTEQ (BLOCK (ALT '!='))) (RULE QUOTE (BLOCK (ALT '\''))) (RULE DOLLAR (BLOCK (ALT '$'))) (RULE file (BLOCK (ALT (BLOCK (ALT moduleDecl)) EOF))) (RULE moduleDecl (BLOCK (ALT 'module' ID SEMICOLON (* (BLOCK (ALT moduleItem))) 'endmodule'))) (RULE moduleItem (BLOCK (ALT declaration) (ALT functionDecl) (ALT statement) (ALT initialBlock))) (RULE initialBlock (BLOCK (ALT 'initial' BEGIN statement END))) (RULE functionDecl (BLOCK (ALT 'function' returnType ID LPAREN (? (BLOCK (ALT parameterList))) RPAREN SEMICOLON (* (BLOCK (ALT statement))) 'endfunction'))) (RULE returnType (BLOCK (ALT (SET 'void' 'int' 'real' ID)))) (RULE parameterList (BLOCK (ALT parameter (? (BLOCK (ALT qualifier))) (? (BLOCK (ALT STAR))) (? (BLOCK (ALT ID))) (* (BLOCK (ALT (? (BLOCK (ALT COMMA))) parameter)))))) (RULE parameter (BLOCK (ALT ID) (ALT 'void') (ALT dataType))) (RULE qualifier (BLOCK (ALT 'const'))) (RULE declaration (BLOCK (ALT dataType ID (? (BLOCK (ALT LBRACK INT COLON INT RBRACK))) (? (BLOCK (ALT EQUAL primary))) SEMICOLON))) (RULE dataType (BLOCK (ALT (SET 'int' 'real' 'logic' 'byte' ID)))) (RULE statement (BLOCK (ALT (BLOCK (ALT assignment) (ALT declaration) (ALT functionCall) (ALT ifStatement) (ALT loopStatement) (ALT switchStatement) (ALT displayStatement) (ALT comment)) (? (BLOCK (ALT SEMICOLON)))))) (RULE statementTwo (BLOCK (ALT (BLOCK (ALT assignment) (ALT declaration) (ALT functionCall) (ALT ifStatement) (ALT loopStatement) (ALT switchStatement) (ALT displayStatement) (ALT comment)) (? (BLOCK (ALT SEMICOLON)))))) (RULE assignment (BLOCK (ALT indexedID (BLOCK (ALT (BLOCK (ALT EQUAL expression))) (ALT PLUSPLUS) (ALT MINUSMINUS))))) (RULE indexedID (BLOCK (ALT ID (* (BLOCK (ALT LBRACK expression RBRACK)))))) (RULE PLUSPLUS (BLOCK (ALT (BLOCK (ALT '++'))))) (RULE MINUSMINUS (BLOCK (ALT (BLOCK (ALT '--'))))) (RULE functionCall (BLOCK (ALT ID LPAREN (? (BLOCK (ALT argumentList))) RPAREN))) (RULE argumentList (BLOCK (ALT argument (* (BLOCK (ALT COMMA argument)))))) (RULE argument (BLOCK (ALT expression) (ALT transformedArgument))) (RULE transformedArgument (BLOCK (ALT dataCastArgument) (ALT bitsArgument))) (RULE dataCastArgument (BLOCK (ALT dataType QUOTE ID))) (RULE bitsArgument (BLOCK (ALT DOLLAR 'bits' LPAREN ID RPAREN))) (RULE functionCallID (BLOCK (ALT ID))) (RULE ifStatement (BLOCK (ALT IF LPAREN expression RPAREN BEGIN (+ (BLOCK (ALT statement))) END (? (BLOCK (ALT ELSE BEGIN (+ (BLOCK (ALT statementTwo))) END)))))) (RULE loopStatement (BLOCK (ALT forLoop) (ALT whileLoop))) (RULE forLoop (BLOCK (ALT FOR LPAREN dataType assignment SEMICOLON expression SEMICOLON assignment RPAREN (? (BLOCK (ALT BEGIN))) (+ (BLOCK (ALT statement))) (? (BLOCK (ALT END)))))) (RULE whileLoop (BLOCK (ALT WHILE LPAREN expression RPAREN (? (BLOCK (ALT BEGIN))) (+ (BLOCK (ALT statement))) (? (BLOCK (ALT END)))))) (RULE switchStatement (BLOCK (ALT CASE LPAREN expression RPAREN (+ (BLOCK (ALT caseBlock))) (? (BLOCK (ALT defaultBlock))) ENDCASE))) (RULE caseBlock (BLOCK (ALT expression COLON (? (BLOCK (ALT BEGIN))) (* (BLOCK (ALT statement))) (? (BLOCK (ALT END))) (? (BLOCK (ALT SEMICOLON)))))) (RULE defaultBlock (BLOCK (ALT DEFAULT COLON (? (BLOCK (ALT (* (BLOCK (ALT statement)))))) (? (BLOCK (ALT SEMICOLON)))))) (RULE expression (BLOCK (ALT primary (? (BLOCK (ALT LPAREN (? (BLOCK (ALT argumentList))) RPAREN))) (* (BLOCK (ALT operator primary)))))) (RULE primary (BLOCK (ALT ID) (ALT HEX_INT) (ALT INT) (ALT STRING) (ALT CHAR) (ALT dataType) (ALT LPAREN expression RPAREN) (ALT castFunctionCall))) (RULE operator (BLOCK (ALT (SET PLUS MINUS STAR SLASH PERCENT LT GT LE GE EQEQ NOTEQ)))) (RULE castFunctionCall (BLOCK (ALT dataType QUOTE ID LPAREN RPAREN))) (RULE displayStatement (BLOCK (ALT DISPLAY LPAREN (? (BLOCK (ALT STRING))) (? (BLOCK (ALT argument))) (? (BLOCK (ALT COMMA argumentList))) RPAREN))) (RULE comment (BLOCK (ALT (SET SINGLE_LINE_COMMENT MULTI_LINE_COMMENT))))))
2024-10-15 22:53:34:217 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SystemVerilog2Tree (@ header {
package SystemVerilog2TreeTransformation;
}) (RULES (RULE file (BLOCK (ALT (BLOCK (ALT moduleDecl)) EOF))) (RULE moduleDecl (BLOCK (ALT 'module' ID SEMICOLON (* (BLOCK (ALT moduleItem))) 'endmodule'))) (RULE moduleItem (BLOCK (ALT declaration) (ALT functionDecl) (ALT statement) (ALT initialBlock))) (RULE initialBlock (BLOCK (ALT 'initial' BEGIN statement END))) (RULE functionDecl (BLOCK (ALT 'function' returnType ID LPAREN (? (BLOCK (ALT parameterList))) RPAREN SEMICOLON (* (BLOCK (ALT statement))) 'endfunction'))) (RULE returnType (BLOCK (ALT (SET 'void' 'int' 'real' ID)))) (RULE parameterList (BLOCK (ALT parameter (? (BLOCK (ALT qualifier))) (? (BLOCK (ALT STAR))) (? (BLOCK (ALT ID))) (* (BLOCK (ALT (? (BLOCK (ALT COMMA))) parameter)))))) (RULE parameter (BLOCK (ALT ID) (ALT 'void') (ALT dataType))) (RULE qualifier (BLOCK (ALT 'const'))) (RULE declaration (BLOCK (ALT dataType ID (? (BLOCK (ALT LBRACK INT COLON INT RBRACK))) (? (BLOCK (ALT EQUAL primary))) SEMICOLON))) (RULE dataType (BLOCK (ALT (SET 'int' 'real' 'logic' 'byte' ID)))) (RULE statement (BLOCK (ALT (BLOCK (ALT assignment) (ALT declaration) (ALT functionCall) (ALT ifStatement) (ALT loopStatement) (ALT switchStatement) (ALT displayStatement) (ALT comment)) (? (BLOCK (ALT SEMICOLON)))))) (RULE statementTwo (BLOCK (ALT (BLOCK (ALT assignment) (ALT declaration) (ALT functionCall) (ALT ifStatement) (ALT loopStatement) (ALT switchStatement) (ALT displayStatement) (ALT comment)) (? (BLOCK (ALT SEMICOLON)))))) (RULE assignment (BLOCK (ALT indexedID (BLOCK (ALT (BLOCK (ALT EQUAL expression))) (ALT PLUSPLUS) (ALT MINUSMINUS))))) (RULE indexedID (BLOCK (ALT ID (* (BLOCK (ALT LBRACK expression RBRACK)))))) (RULE functionCall (BLOCK (ALT ID LPAREN (? (BLOCK (ALT argumentList))) RPAREN))) (RULE argumentList (BLOCK (ALT argument (* (BLOCK (ALT COMMA argument)))))) (RULE argument (BLOCK (ALT expression) (ALT transformedArgument))) (RULE transformedArgument (BLOCK (ALT dataCastArgument) (ALT bitsArgument))) (RULE dataCastArgument (BLOCK (ALT dataType QUOTE ID))) (RULE bitsArgument (BLOCK (ALT DOLLAR 'bits' LPAREN ID RPAREN))) (RULE functionCallID (BLOCK (ALT ID))) (RULE ifStatement (BLOCK (ALT IF LPAREN expression RPAREN BEGIN (+ (BLOCK (ALT statement))) END (? (BLOCK (ALT ELSE BEGIN (+ (BLOCK (ALT statementTwo))) END)))))) (RULE loopStatement (BLOCK (ALT forLoop) (ALT whileLoop))) (RULE forLoop (BLOCK (ALT FOR LPAREN dataType assignment SEMICOLON expression SEMICOLON assignment RPAREN (? (BLOCK (ALT BEGIN))) (+ (BLOCK (ALT statement))) (? (BLOCK (ALT END)))))) (RULE whileLoop (BLOCK (ALT WHILE LPAREN expression RPAREN (? (BLOCK (ALT BEGIN))) (+ (BLOCK (ALT statement))) (? (BLOCK (ALT END)))))) (RULE switchStatement (BLOCK (ALT CASE LPAREN expression RPAREN (+ (BLOCK (ALT caseBlock))) (? (BLOCK (ALT defaultBlock))) ENDCASE))) (RULE caseBlock (BLOCK (ALT expression COLON (? (BLOCK (ALT BEGIN))) (* (BLOCK (ALT statement))) (? (BLOCK (ALT END))) (? (BLOCK (ALT SEMICOLON)))))) (RULE defaultBlock (BLOCK (ALT DEFAULT COLON (? (BLOCK (ALT (* (BLOCK (ALT statement)))))) (? (BLOCK (ALT SEMICOLON)))))) (RULE expression (BLOCK (ALT primary (? (BLOCK (ALT LPAREN (? (BLOCK (ALT argumentList))) RPAREN))) (* (BLOCK (ALT operator primary)))))) (RULE primary (BLOCK (ALT ID) (ALT HEX_INT) (ALT INT) (ALT STRING) (ALT CHAR) (ALT dataType) (ALT LPAREN expression RPAREN) (ALT castFunctionCall))) (RULE operator (BLOCK (ALT (SET PLUS MINUS STAR SLASH PERCENT LT GT LE GE EQEQ NOTEQ)))) (RULE castFunctionCall (BLOCK (ALT dataType QUOTE ID LPAREN RPAREN))) (RULE displayStatement (BLOCK (ALT DISPLAY LPAREN (? (BLOCK (ALT STRING))) (? (BLOCK (ALT argument))) (? (BLOCK (ALT COMMA argumentList))) RPAREN))) (RULE comment (BLOCK (ALT (SET SINGLE_LINE_COMMENT MULTI_LINE_COMMENT))))))
2024-10-15 22:53:34:217 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SystemVerilog2TreeLexer (@ header {
package SystemVerilog2TreeTransformation;
}) (RULES (RULE T__0 (BLOCK (ALT 'module'))) (RULE T__1 (BLOCK (ALT 'endmodule'))) (RULE T__2 (BLOCK (ALT 'initial'))) (RULE T__3 (BLOCK (ALT 'function'))) (RULE T__4 (BLOCK (ALT 'endfunction'))) (RULE T__5 (BLOCK (ALT 'void'))) (RULE T__6 (BLOCK (ALT 'int'))) (RULE T__7 (BLOCK (ALT 'real'))) (RULE T__8 (BLOCK (ALT 'const'))) (RULE T__9 (BLOCK (ALT 'logic'))) (RULE T__10 (BLOCK (ALT 'byte'))) (RULE T__11 (BLOCK (ALT 'bits'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE BEGIN (BLOCK (ALT 'begin'))) (RULE END (BLOCK (ALT 'end'))) (RULE ENDCASE (BLOCK (ALT 'endcase'))) (RULE IF (BLOCK (ALT 'if'))) (RULE DISPLAY (BLOCK (ALT '$display'))) (RULE ID (BLOCK (ALT [a-zA-Z_.] (* (BLOCK (ALT [a-zA-Z0-9_.])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE HEX_INT (BLOCK (ALT '0x' (+ (BLOCK (ALT [0-9a-fA-F])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE SINGLE_LINE_COMMENT (BLOCK (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))))) (RULE MULTI_LINE_COMMENT (BLOCK (ALT '/*' (* (BLOCK (ALT .))) '*/'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT '\\"') (ALT (~ (SET ["]))))) '"'))) (RULE CHAR (BLOCK (ALT '\'' . '\''))) (RULE SEMICOLON (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LBRACE (BLOCK (ALT '{'))) (RULE RBRACE (BLOCK (ALT '}'))) (RULE LBRACK (BLOCK (ALT '['))) (RULE RBRACK (BLOCK (ALT ']'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE STAR (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE PERCENT (BLOCK (ALT '%'))) (RULE LT (BLOCK (ALT '<'))) (RULE GT (BLOCK (ALT '>'))) (RULE LE (BLOCK (ALT '<='))) (RULE GE (BLOCK (ALT '>='))) (RULE EQEQ (BLOCK (ALT '=='))) (RULE NOTEQ (BLOCK (ALT '!='))) (RULE QUOTE (BLOCK (ALT '\''))) (RULE DOLLAR (BLOCK (ALT '$'))) (RULE PLUSPLUS (BLOCK (ALT (BLOCK (ALT '++'))))) (RULE MINUSMINUS (BLOCK (ALT (BLOCK (ALT '--')))))))
2024-10-15 22:53:34:414 action-translator LogManager.java:25 translate 
package SystemVerilog2TreeTransformation;

2024-10-15 22:53:34:515 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, ELSE=13, CASE=14, DEFAULT=15, BREAK=16, FOR=17, WHILE=18, BEGIN=19, END=20, ENDCASE=21, IF=22, DISPLAY=23, ID=24, INT=25, HEX_INT=26, WS=27, SINGLE_LINE_COMMENT=28, MULTI_LINE_COMMENT=29, STRING=30, CHAR=31, SEMICOLON=32, COLON=33, COMMA=34, DOT=35, LPAREN=36, RPAREN=37, LBRACE=38, RBRACE=39, LBRACK=40, RBRACK=41, EQUAL=42, PLUS=43, MINUS=44, STAR=45, SLASH=46, PERCENT=47, LT=48, GT=49, LE=50, GE=51, EQEQ=52, NOTEQ=53, QUOTE=54, DOLLAR=55, PLUSPLUS=56, MINUSMINUS=57}
2024-10-15 22:53:34:515 semantics LogManager.java:25 strings={'module'=1, 'endmodule'=2, 'initial'=3, 'function'=4, 'endfunction'=5, 'void'=6, 'int'=7, 'real'=8, 'const'=9, 'logic'=10, 'byte'=11, 'bits'=12, 'else'=13, 'case'=14, 'default'=15, 'break'=16, 'for'=17, 'while'=18, 'begin'=19, 'end'=20, 'endcase'=21, 'if'=22, '$display'=23, ';'=32, ':'=33, ','=34, '.'=35, '('=36, ')'=37, '{'=38, '}'=39, '['=40, ']'=41, '='=42, '+'=43, '-'=44, '*'=45, '/'=46, '%'=47, '<'=48, '>'=49, '<='=50, '>='=51, '=='=52, '!='=53, '\''=54, '$'=55}
2024-10-15 22:53:34:536 LL1 LogManager.java:25 
DECISION 0 in rule moduleDecl
2024-10-15 22:53:34:536 LL1 LogManager.java:25 look=[{3..4, 7..8, 10..11, 14, 17..18, 22..24, 28..29}, 2]
2024-10-15 22:53:34:537 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:537 LL1 LogManager.java:25 
DECISION 1 in rule moduleItem
2024-10-15 22:53:34:537 LL1 LogManager.java:25 look=[{7..8, 10..11, 24}, 4, {7..8, 10..11, 14, 17..18, 22..24, 28..29}, 3]
2024-10-15 22:53:34:537 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:537 LL1 LogManager.java:25 
DECISION 2 in rule functionDecl
2024-10-15 22:53:34:537 LL1 LogManager.java:25 look=[{6..8, 10..11, 24}, 37]
2024-10-15 22:53:34:537 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:537 LL1 LogManager.java:25 
DECISION 3 in rule functionDecl
2024-10-15 22:53:34:537 LL1 LogManager.java:25 look=[{7..8, 10..11, 14, 17..18, 22..24, 28..29}, 5]
2024-10-15 22:53:34:537 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:537 LL1 LogManager.java:25 
DECISION 4 in rule parameterList
2024-10-15 22:53:34:537 LL1 LogManager.java:25 look=[9, {6..8, 10..11, 24, 34, 37, 45}]
2024-10-15 22:53:34:537 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:537 LL1 LogManager.java:25 
DECISION 5 in rule parameterList
2024-10-15 22:53:34:537 LL1 LogManager.java:25 look=[45, {6..8, 10..11, 24, 34, 37}]
2024-10-15 22:53:34:537 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:537 LL1 LogManager.java:25 
DECISION 6 in rule parameterList
2024-10-15 22:53:34:537 LL1 LogManager.java:25 look=[24, {6..8, 10..11, 24, 34, 37}]
2024-10-15 22:53:34:537 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:537 LL1 LogManager.java:25 
DECISION 7 in rule parameterList
2024-10-15 22:53:34:537 LL1 LogManager.java:25 look=[34, {6..8, 10..11, 24}]
2024-10-15 22:53:34:537 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:537 LL1 LogManager.java:25 
DECISION 8 in rule parameterList
2024-10-15 22:53:34:538 LL1 LogManager.java:25 look=[{6..8, 10..11, 24, 34}, 37]
2024-10-15 22:53:34:538 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:538 LL1 LogManager.java:25 
DECISION 9 in rule parameter
2024-10-15 22:53:34:538 LL1 LogManager.java:25 look=[24, 6, {7..8, 10..11, 24}]
2024-10-15 22:53:34:538 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:538 LL1 LogManager.java:25 
DECISION 10 in rule declaration
2024-10-15 22:53:34:538 LL1 LogManager.java:25 look=[40, {32, 42}]
2024-10-15 22:53:34:538 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:538 LL1 LogManager.java:25 
DECISION 11 in rule declaration
2024-10-15 22:53:34:538 LL1 LogManager.java:25 look=[42, 32]
2024-10-15 22:53:34:538 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:538 LL1 LogManager.java:25 
DECISION 12 in rule statement
2024-10-15 22:53:34:538 LL1 LogManager.java:25 look=[24, {7..8, 10..11, 24}, 24, 22, {17..18}, 14, 23, {28..29}]
2024-10-15 22:53:34:538 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:538 LL1 LogManager.java:25 
DECISION 13 in rule statement
2024-10-15 22:53:34:539 LL1 LogManager.java:25 look=[32, {2..5, 7..8, 10..11, 14..15, 17..18, 20..26, 28..32, 36}]
2024-10-15 22:53:34:539 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:539 LL1 LogManager.java:25 
DECISION 14 in rule statementTwo
2024-10-15 22:53:34:539 LL1 LogManager.java:25 look=[24, {7..8, 10..11, 24}, 24, 22, {17..18}, 14, 23, {28..29}]
2024-10-15 22:53:34:540 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:540 LL1 LogManager.java:25 
DECISION 15 in rule statementTwo
2024-10-15 22:53:34:540 LL1 LogManager.java:25 look=[32, {7..8, 10..11, 14, 17..18, 20, 22..24, 28..29}]
2024-10-15 22:53:34:540 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:540 LL1 LogManager.java:25 
DECISION 16 in rule assignment
2024-10-15 22:53:34:540 LL1 LogManager.java:25 look=[42, 56, 57]
2024-10-15 22:53:34:540 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:540 LL1 LogManager.java:25 
DECISION 17 in rule indexedID
2024-10-15 22:53:34:540 LL1 LogManager.java:25 look=[40, {42, 56..57}]
2024-10-15 22:53:34:540 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:540 LL1 LogManager.java:25 
DECISION 18 in rule functionCall
2024-10-15 22:53:34:540 LL1 LogManager.java:25 look=[{7..8, 10..11, 24..26, 30..31, 36, 55}, 37]
2024-10-15 22:53:34:540 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:540 LL1 LogManager.java:25 
DECISION 19 in rule argumentList
2024-10-15 22:53:34:540 LL1 LogManager.java:25 look=[34, 37]
2024-10-15 22:53:34:540 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:540 LL1 LogManager.java:25 
DECISION 20 in rule argument
2024-10-15 22:53:34:540 LL1 LogManager.java:25 look=[{7..8, 10..11, 24..26, 30..31, 36}, {7..8, 10..11, 24, 55}]
2024-10-15 22:53:34:540 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:540 LL1 LogManager.java:25 
DECISION 21 in rule transformedArgument
2024-10-15 22:53:34:540 LL1 LogManager.java:25 look=[{7..8, 10..11, 24}, 55]
2024-10-15 22:53:34:540 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:541 LL1 LogManager.java:25 
DECISION 22 in rule ifStatement
2024-10-15 22:53:34:541 LL1 LogManager.java:25 look=[{7..8, 10..11, 14, 17..18, 22..24, 28..29}, 20]
2024-10-15 22:53:34:541 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:541 LL1 LogManager.java:25 
DECISION 23 in rule ifStatement
2024-10-15 22:53:34:541 LL1 LogManager.java:25 look=[{7..8, 10..11, 14, 17..18, 22..24, 28..29}, 20]
2024-10-15 22:53:34:541 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:541 LL1 LogManager.java:25 
DECISION 24 in rule ifStatement
2024-10-15 22:53:34:541 LL1 LogManager.java:25 look=[13, {2..5, 7..8, 10..11, 14..15, 17..18, 20..26, 28..32, 36}]
2024-10-15 22:53:34:542 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:542 LL1 LogManager.java:25 
DECISION 25 in rule loopStatement
2024-10-15 22:53:34:542 LL1 LogManager.java:25 look=[17, 18]
2024-10-15 22:53:34:542 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:542 LL1 LogManager.java:25 
DECISION 26 in rule forLoop
2024-10-15 22:53:34:542 LL1 LogManager.java:25 look=[19, {7..8, 10..11, 14, 17..18, 22..24, 28..29}]
2024-10-15 22:53:34:542 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:542 LL1 LogManager.java:25 
DECISION 27 in rule forLoop
2024-10-15 22:53:34:542 LL1 LogManager.java:25 look=[{7..8, 10..11, 14, 17..18, 22..24, 28..29}, {2..5, 7..8, 10..11, 14..15, 17..18, 20..26, 28..32, 36}]
2024-10-15 22:53:34:542 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:542 LL1 LogManager.java:25 
DECISION 28 in rule forLoop
2024-10-15 22:53:34:543 LL1 LogManager.java:25 look=[20, {2..5, 7..8, 10..11, 14..15, 17..18, 20..26, 28..32, 36}]
2024-10-15 22:53:34:543 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:543 LL1 LogManager.java:25 
DECISION 29 in rule whileLoop
2024-10-15 22:53:34:543 LL1 LogManager.java:25 look=[19, {7..8, 10..11, 14, 17..18, 22..24, 28..29}]
2024-10-15 22:53:34:543 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:543 LL1 LogManager.java:25 
DECISION 30 in rule whileLoop
2024-10-15 22:53:34:544 LL1 LogManager.java:25 look=[{7..8, 10..11, 14, 17..18, 22..24, 28..29}, {2..5, 7..8, 10..11, 14..15, 17..18, 20..26, 28..32, 36}]
2024-10-15 22:53:34:544 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:544 LL1 LogManager.java:25 
DECISION 31 in rule whileLoop
2024-10-15 22:53:34:544 LL1 LogManager.java:25 look=[20, {2..5, 7..8, 10..11, 14..15, 17..18, 20..26, 28..32, 36}]
2024-10-15 22:53:34:544 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:544 LL1 LogManager.java:25 
DECISION 32 in rule switchStatement
2024-10-15 22:53:34:544 LL1 LogManager.java:25 look=[{7..8, 10..11, 24..26, 30..31, 36}, {15, 21}]
2024-10-15 22:53:34:544 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:544 LL1 LogManager.java:25 
DECISION 33 in rule switchStatement
2024-10-15 22:53:34:544 LL1 LogManager.java:25 look=[15, 21]
2024-10-15 22:53:34:544 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:544 LL1 LogManager.java:25 
DECISION 34 in rule caseBlock
2024-10-15 22:53:34:544 LL1 LogManager.java:25 look=[19, {7..8, 10..11, 14..15, 17..18, 20..26, 28..32, 36}]
2024-10-15 22:53:34:544 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:544 LL1 LogManager.java:25 
DECISION 35 in rule caseBlock
2024-10-15 22:53:34:545 LL1 LogManager.java:25 look=[{7..8, 10..11, 14, 17..18, 22..24, 28..29}, {7..8, 10..11, 15, 20..21, 24..26, 30..32, 36}]
2024-10-15 22:53:34:545 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:545 LL1 LogManager.java:25 
DECISION 36 in rule caseBlock
2024-10-15 22:53:34:545 LL1 LogManager.java:25 look=[20, {7..8, 10..11, 15, 21, 24..26, 30..32, 36}]
2024-10-15 22:53:34:545 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:545 LL1 LogManager.java:25 
DECISION 37 in rule caseBlock
2024-10-15 22:53:34:545 LL1 LogManager.java:25 look=[32, {7..8, 10..11, 15, 21, 24..26, 30..31, 36}]
2024-10-15 22:53:34:545 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:545 LL1 LogManager.java:25 
DECISION 38 in rule defaultBlock
2024-10-15 22:53:34:545 LL1 LogManager.java:25 look=[{7..8, 10..11, 14, 17..18, 22..24, 28..29}, {21, 32}]
2024-10-15 22:53:34:545 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:545 LL1 LogManager.java:25 
DECISION 39 in rule defaultBlock
2024-10-15 22:53:34:545 LL1 LogManager.java:25 look=[{7..8, 10..11, 14, 17..18, 21..24, 28..29, 32}, {21, 32}]
2024-10-15 22:53:34:545 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:545 LL1 LogManager.java:25 
DECISION 40 in rule defaultBlock
2024-10-15 22:53:34:545 LL1 LogManager.java:25 look=[32, 21]
2024-10-15 22:53:34:545 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:545 LL1 LogManager.java:25 
DECISION 41 in rule expression
2024-10-15 22:53:34:545 LL1 LogManager.java:25 look=[{7..8, 10..11, 24..26, 30..31, 36, 55}, 37]
2024-10-15 22:53:34:545 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:545 LL1 LogManager.java:25 
DECISION 42 in rule expression
2024-10-15 22:53:34:546 LL1 LogManager.java:25 look=[36, {2..5, 7..8, 10..11, 14..15, 17..18, 20..26, 28..34, 36..37, 41, 43..53}]
2024-10-15 22:53:34:546 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:546 LL1 LogManager.java:25 
DECISION 43 in rule expression
2024-10-15 22:53:34:546 LL1 LogManager.java:25 look=[{43..53}, {2..5, 7..8, 10..11, 14..15, 17..18, 20..26, 28..34, 36..37, 41}]
2024-10-15 22:53:34:546 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:546 LL1 LogManager.java:25 
DECISION 44 in rule primary
2024-10-15 22:53:34:546 LL1 LogManager.java:25 look=[24, 26, 25, 30, 31, {7..8, 10..11, 24}, 36, {7..8, 10..11, 24}]
2024-10-15 22:53:34:546 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:546 LL1 LogManager.java:25 
DECISION 45 in rule displayStatement
2024-10-15 22:53:34:547 LL1 LogManager.java:25 look=[30, {7..8, 10..11, 24..26, 30..31, 34, 36..37, 55}]
2024-10-15 22:53:34:547 LL1 LogManager.java:25 LL(1)? false
2024-10-15 22:53:34:547 LL1 LogManager.java:25 
DECISION 46 in rule displayStatement
2024-10-15 22:53:34:547 LL1 LogManager.java:25 look=[{7..8, 10..11, 24..26, 30..31, 36, 55}, {34, 37}]
2024-10-15 22:53:34:547 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:547 LL1 LogManager.java:25 
DECISION 47 in rule displayStatement
2024-10-15 22:53:34:547 LL1 LogManager.java:25 look=[34, 37]
2024-10-15 22:53:34:547 LL1 LogManager.java:25 LL(1)? true
2024-10-15 22:53:34:547 action-translator LogManager.java:25 translate 
package SystemVerilog2TreeTransformation;

2024-10-15 22:53:34:659 action-translator LogManager.java:25 translate 
package SystemVerilog2TreeTransformation;

2024-10-15 22:53:34:659 action-translator LogManager.java:25 translate 
package SystemVerilog2TreeTransformation;

2024-10-15 22:53:34:664 action-translator LogManager.java:25 translate 
package SystemVerilog2TreeTransformation;

2024-10-15 22:53:34:664 action-translator LogManager.java:25 translate 
package SystemVerilog2TreeTransformation;

2024-10-15 22:53:34:669 action-translator LogManager.java:25 translate 
package SystemVerilog2TreeTransformation;

2024-10-15 22:53:34:669 action-translator LogManager.java:25 translate 
package SystemVerilog2TreeTransformation;

2024-10-15 22:53:34:673 action-translator LogManager.java:25 translate 
package SystemVerilog2TreeTransformation;

2024-10-15 22:53:34:673 action-translator LogManager.java:25 translate 
package SystemVerilog2TreeTransformation;

