<?xml version="1.0" encoding="UTF-8"?>
<dSML:System
    xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI"
    xmlns:dSML="http://www.example.org/dSML">
    <declaration>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="New_Mode_Flag"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="initial_flag"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="Running_Mode"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="Set_Button"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="Start_Button"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="Standby_Button"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint32_t"
        name="check_flag_VCV"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="In_Init_Flag"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint32_t"
        name="In_Start_Tick"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="InEx_Flag"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint32_t"
        name="peep_observed"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint32_t"
        name="In_End_Tick"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="Ex_Init_Flag"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="p_plateau_flag"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint32_t"
        name="p_plateau_cycles"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint32_t"
        name="p_plateau"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint32_t"
        name="Exhale_Time"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint32_t"
        name="Inhale_Time"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="ExtraDelayFlag"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="volumeORpressureMode"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="Sensors_Running"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint32_t"
        name="check_flag_sensors"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="osThreadId"
        name="VCVmodeHandle"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="osThreadId"
        name="SensorsHandle"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="char"
        name="txx"
        size="[13]"
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="uint8_t"
        name="cmd_end"
        size="[3]"
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="TickType_t"
        name="t3"
        size=""
        initialValue=""/>
    <attribute
        isGlobal="extern"
        dataType="osEvent"
        name="VCV_InRet"
        size=""
        initialValue=""/>
    <functionprototype
        returnType="float"
        functionName="get_pressure">
      <parameter/>
    </functionprototype>
    <functionprototype
        returnType="void"
        functionName="find_peep">
      <parameter/>
    </functionprototype>
    <functionprototype
        returnType="void"
        functionName="set_flow">
      <parameter/>
    </functionprototype>
    <functionprototype
        returnType="void"
        functionName="Suspend_All_Modes">
      <parameter/>
    </functionprototype>
    <functionprototype
        returnType="void"
        functionName="Update_Control_Parameters">
      <parameter
          dataType="void"/>
    </functionprototype>
  </declaration>  
  <component
      name="Start_VCVmode"
      type="void">
    <parameter
        name="argument"
        dataType="void"
        qualifier="const"
        pointer="*"/>
    <comment
        commentText="USER CODE BEGIN Start_VCVmode"/>
    <comment
        commentText="Infinite loop"/>
    <comment
        commentText="for(;;)"/>
    <comment
        commentText="{"/>    
    <statement>
      <if keyword="if"
          variable="New_Mode_Flag"
          operator="=="
          value="1">
        <assignment
            leftAttribute="New_Mode_Flag"
            operator="="
            AssignedSide="0"/>
        <if
            keyword="if"
            variable="initial_flag"
            operator="=="
            value="1">
          <assignment
              leftAttribute="initial_flag"
              operator="="
              AssignedSide="0"/>
          <assignment
              leftAttribute="t3"
              operator="="
              AssignedSide="HAL_GetTick()"/>
        </if>
        <if
            keyword="else">
              <functioncall
                functionName="New_Mode_Shift"/>
	          <if
	              keyword="if"
	              variable="Running_Mode"
	              operator="!="
	              value="1">
	            <functioncall
	                functionName="osThreadSuspend"
	                parameterString="VCVmodeHandle"/>
	          </if>
        </if>
      </if>
    </statement>
    <statement>
      <if keyword="if"
          variable="Set_Button"
          operator="=="
          value="1">
        <assignment
            leftAttribute="Set_Button"
            operator="="
            AssignedSide="0"/>
        <assignment
            leftAttribute="volumeORpressureMode"
            operator="="
            AssignedSide="0"/>
        <functioncall
            functionName="Update_Internal_Parameters"/>
        <functioncall
            functionName="Update_Control_Parameters"/>
      </if>
    </statement>
    <statement>
      <if keyword="if"
          variable="Start_Button"
          operator="=="
          value="1">
        <assignment
            leftAttribute="Start_Button"
            operator="="
            AssignedSide="0"/>
        <functioncall
            functionName="osThreadResume"
            parameterString="SensorsHandle"/>    
        <assignment
            leftAttribute="Sensors_Running"
            operator="="
            AssignedSide="1"/>
        <functioncall
            functionName="Update_Internal_Parameters"/>
        <functioncall
            functionName="Update_Control_Parameters"/>
      </if>
    </statement>
    <statement>
      <if keyword="if"
          variable="Standby_Button"
          operator="=="
          value="1">
        <assignment
            leftAttribute="Standby_Button"
            operator="="
            AssignedSide="0"/>
        <functioncall
            functionName="HAL_DAC_Stop_DMA"
            parameterString="hdac , DAC_CHANNEL_1"/>    
        <assignment
            leftAttribute="Sensors_Running"
            operator="="
            AssignedSide="0"/>
        <functioncall
            functionName="Suspend_All_Modes"/>
      </if>
    </statement>
    <comment
        commentText="STANDBY Button"/>
    <statement>
      <assignment
          leftAttribute="check_flag_VCV"
          operator="++"
		  AssignedSide=""/>
    </statement>
    <statement>
      <assignment
          leftAttribute="check_flag_sensors"
          operator="="
		  AssignedSide="0"/>
    </statement>
    <comment
        commentText="Initialization Before Inhalation"/>
    <statement>
    	<functioncall
            functionName="HAL_GPIO_WritePin"
            parameterString="GPIOE, Pressure_SV_Pin, GPIO_PIN_RESET"/>
    </statement> 
    <statement>
    	<functioncall
            functionName="Check_Alarm_Change_To_High_Priority"
            parameterString=""/>
    </statement> 
    <statement>
    	<functioncall
            functionName="HAL_GPIO_WritePin"
            parameterString="GPIOF, GPIO_PIN_7, GPIO_PIN_RESET"/>
    </statement> 
    <statement>
    	<assignment
            leftAttribute="In_Init_Flag"
            operator="="
            AssignedSide="1"/>
    </statement>
    <comment
        commentText="INHALE CYCLE"/>
    <statement>
    	<assignment
            leftAttribute="InEx_Flag"
            operator="="
            AssignedSide="1"/>
    </statement> 
    <statement>
    	<functioncall
            functionName="HAL_GPIO_WritePin"
            parameterString="GPIOG, GPIO_PIN_13, GPIO_PIN_SET"/>
    </statement> 
    <statement>
    	<functioncall
            functionName="HAL_GPIO_WritePin"
            parameterString="GPIOF, GPIO_PIN_7, GPIO_PIN_SET"/>
    </statement> 
    <statement>
    	<assignment
            leftAttribute="In_Start_Tick"
            operator="="
            AssignedSide="HAL_GetTick()"/>
    </statement>
    <statement>
    	<assignment
            leftAttribute="VCV_InRet"
            operator="="
            AssignedSide="osSignalWait (0x0001, Inhale_Time)"/>
    </statement> 
    <statement>
    	<functioncall
            functionName="HAL_GPIO_WritePin"
            parameterString="GPIOF, GPIO_PIN_7, GPIO_PIN_RESET"/>
    </statement>    
    <statement>
      <if keyword="if"
          variable="VCV_InRet.status"
          operator="!="
          value="osEventTimeout">
        <assignment
            leftAttribute="In_End_Tick"
            operator="="
            AssignedSide="HAL_GetTick()"/>
        <assignment
            leftAttribute="ExtraDelayFlag"
            operator="="
            AssignedSide="1"/>
        <functioncall
            functionName="osDelay"
            parameterString="Inhale_Time - (In_End_Tick - In_Start_Tick)"/>
        <assignment
            leftAttribute="ExtraDelayFlag"
            operator="="
            AssignedSide="0"/>
      </if>
    </statement>
    <comment
        commentText="Initialization Before Exhalation "/>
    <statement>
        <assignment
            leftAttribute="Ex_Init_Flag"
            operator="="
            AssignedSide="1"/>  
    </statement>
    <comment
        commentText="EXHALE CYCLE "/>
    <statement>
      <assignment
            leftAttribute="InEx_Flag"
            operator="="
            AssignedSide="0"/>  
    </statement> 
    <comment
        commentText="Peak Plateau Measurement"/> 
    <statement>
    	<assignment
            leftAttribute="p_plateau_cycles"
            operator="="
            AssignedSide="p_plateau_cycles + 1"/>  
    </statement>
    <statement>
      <if keyword="if"
          variable="p_plateau_cycles"
          operator=">="
          value="50">
        <assignment
            leftAttribute="count"
            operator="="
            AssignedSide="0"/>
        <assignment
            leftAttribute="p_plateau_flag"
            operator="="
            AssignedSide="1"/>
        <functioncall
            functionName="osDelay"
            parameterString="5000"/> 
        <assignment
            leftAttribute="p_plateau"
            operator="="
            AssignedSide="get_pressure()"/>
        <assignment
            leftAttribute="txx[0]"
            operator="="
            AssignedSide="'p'"/>
        <assignment
            leftAttribute="txx[1]"
            operator="="
            AssignedSide="'p'"/> 
         <assignment
            leftAttribute="txx[2]"
            operator="="
            AssignedSide="'l'"/> 
         <assignment
            leftAttribute="txx[3]"
            operator="="
            AssignedSide="'a'"/> 
         <assignment
            leftAttribute="txx[4]"
            operator="="
            AssignedSide="'t'"/> 
         <assignment
            leftAttribute="txx[5]"
            operator="="
            AssignedSide="'.'"/> 
         <assignment
            leftAttribute="txx[6]"
            operator="="
            AssignedSide="'6'"/> 
         <assignment
            leftAttribute="txx[7]"
            operator="="
            AssignedSide="'a'"/> 
         <assignment
            leftAttribute="txx[8]"
            operator="="
            AssignedSide="'l'"/> 
         <assignment
            leftAttribute="txx[9]"
            operator="="
            AssignedSide="'='"/> 
         <assignment
            leftAttribute="txx[10]"
            operator="="
            AssignedSide="p_plateau/100 + '0'"/> 
         <assignment
            leftAttribute="txx[11]"
            operator="="
            AssignedSide="(p_plateau%100)/10 + '0'"/> 
         <assignment
            leftAttribute="txx[12]"
            operator="="
            AssignedSide="p_plateau%10 + '0'"/>
         <functioncall
            functionName="HAL_UART_Transmit"
            parameterString="huart3,(uint8_t *)txx, sizeof(txx),10"/>
         <functioncall
            functionName="HAL_UART_Transmit"
            parameterString="huart3,(uint8_t *)cmd_end, sizeof(cmd_end),10"/>      
         <assignment
            leftAttribute="p_plateau_cycles"
            operator="="
            AssignedSide="0"/> 
         <assignment
            leftAttribute="p_plateau_flag"
            operator="="
            AssignedSide="0"/>          
      </if>
    </statement>   
    <comment
        commentText="Exhalation Starts"/> 
    <statement>
    	<functioncall
            functionName="HAL_GPIO_WritePin"
            parameterString="GPIOE, Pressure_SV_Pin, GPIO_PIN_RESET"/>
    </statement>
    <statement>
    	<functioncall
            functionName="HAL_GPIO_WritePin"
            parameterString="GPIOG, GPIO_PIN_14, GPIO_PIN_SET"/>
    </statement>
    <statement>
    	<functioncall
            functionName="HAL_GPIO_WritePin"
            parameterString="GPIOG, GPIO_PIN_5, GPIO_PIN_SET"/>
    </statement>
    <statement>
    	<functioncall
            functionName="osDelay"
            parameterString="Exhale_Time"/>
    </statement>
    <statement>
    	<functioncall
            functionName="HAL_GPIO_WritePin"
            parameterString="GPIOG, GPIO_PIN_5, GPIO_PIN_RESET"/>
    </statement>
    <statement>
    	<functioncall
            functionName="HAL_GPIO_WritePin"
            parameterString="GPIOG, GPIO_PIN_14, GPIO_PIN_RESET"/>
    </statement>
    <statement>
    	<assignment
            leftAttribute="peep_observed"
            operator="="
            AssignedSide="(uint32_t)get_pressure()"/>  
    </statement>
    <statement>
    	<functioncall
            functionName="Alarm_Check"
            parameterString=""/>
    </statement> 
    <statement>
    	<functioncall
            functionName="find_peep"
            parameterString=""/>
    </statement>       
    <statement>
    	<functioncall
            functionName="set_flow"
            parameterString=""/>
    </statement>       
    <comment
        commentText="}"/> 
    <comment
        commentText="USER CODE END Start_VCVmode"/> 
      
  </component>
</dSML:System>